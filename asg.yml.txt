---
 - name: "Creating ELB with ASG"
   hosts: localhost
   vars_files:
     - asg.vars
   tasks:
     - name: "create security group"
       ec2_group:
         name: "{{ sg }}"
         description: Allow 80,443,22 and 3306
         region: ap-south-1
         rules:
           - proto: tcp
             from_port: 80
             to_port: 80
             cidr_ip: 0.0.0.0/0
           - proto: tcp
             from_port: 22
             to_port: 22
             cidr_ip: 10.0.0.0/0
           - proto: tcp
             from_port: 443
             to_port: 443
             cidr_ip: 0.0.0.0/0
           - proto: tcp
             from_port: 3306
             to_port: 3306
             cidr_ip: 0.0.0.0/0
       register: sg
     - debug:
         var: "sg.group_id"

     - name: "Create Launch Configuration"
       ec2_lc:
         name: "{{ name }}_lc"
         image_id: "{{ image }}"
         key_name: "{{ key }}"
         instance_type: "{{ type }}"
         security_groups: "{{ sg.group_id }}"
         region: "{{ region }}"
         user_data_path : /root/userdata
       register: lc_status
     - name: "lc details"
       debug:
         var: "lc_status.name"

     - name: "Load balancer creation"
       ec2_elb_lb:
         name: elb
         region: "{{ region }}"
         state: present
         connection_draining_timeout: 30
         zones:
           - ap-south-1a
           - ap-south-1b
         listeners:
           - protocol: http
             load_balancer_port: 80
             instance_port: 80
         health_check:
           ping_protocol: http
           ping_port: 80
           ping_path: "/health.html"
           response_timeout: 5
           interval: 15
           unhealthy_threshold: 2
           healthy_threshold: 2
       register: lb_status
     - debug:
         var: "lb_status"

     - name: "create ASG"
       ec2_asg:
         name: "{{ name }}_asg"
         launch_config_name: "{{ lc_status.name }}"
         load_balancers: "{{ lb_status.elb.name }}"
         health_check_period: 30
         health_check_type: EC2
         replace_all_instances: yes
         min_size: 3
         max_size: 3
         desired_capacity: 3
         region: "{{ region }}"
         tags:
           - Name: devops-web
             propagate_at_launch: true
       register: asg_status
     - name: "asg_status"
       debug:
         var: "asg_status.auto_scaling_group_name"

     - name: "collect ec2 instance details created by asg"
       ec2_instance_info:
         region: "{{ region }}"
         filters:
           "tag:aws:autoscaling:groupName": "{{ asg_status.auto_scaling_group_name }}"
           instance-state-name: [ "running"]
       register: instance_status
     - name:
       debug:
         var: instance_status

     - name: "Fetch ec2 details"
       debug:
         var: "instance_status.instances[0].public_ip_address , instance_status.instances[1].public_ip_address"

     - name: "Aws - Creating Dynamic Inventory"
       add_host:
         name: "{{ item.public_ip_address }}"
         groups: "instances"
         ansible_host: "{{ item.public_ip_address }}"
         ansible_port: 22
         ansible_user: "ec2-user"
         ansible_ssh_private_key_file: "/root/{{ key }}.pem"
         ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
       with_items:
         - "{{ instance_status.instances }}"

     - debug:
         msg: "{{ item.public_ip_address }}"
       with_items:
         - "{{ instance_status.instances }}"


 - name: "Rolling update starting"
   hosts: instances
   become: true
   serial: 1
   vars_files:
     - update.vars
   tasks:

     - name: "Cloning Git repository"
       git:
         repo: "{{ git_url }}"
         dest: /var/contents/
       register: repo_status

     - name: "Disable Health Check"
       when: repo_status.changed == true
       file:
         path: /var/www/html/health.html
         state: touch
         mode: 0000

     - name: "Off loading Ec2-Instance From ELB"
       when: repo_status.changed == true
       pause:
         seconds: "{{ pause_time }}"

     - name: "copying contents to website"
       when: repo_status.changed == true
       copy:
         src: /var/contents/
         dest: /var/www/html/
         remote_src: true

     - name: "Restarting application"
       when: repo_status.changed == true
       service:
         name: httpd
         state: restarted
         enabled: true

     - name: "Enable Health Check"
       when: repo_status.changed == true
       file:
         path: /var/www/html/health.html
         state: touch
         mode: 0644

     - name: "Re-load ec2 instances to ELB"
       when: repo_status.changed == true
       pause:
         seconds: "{{ pause_time }}"